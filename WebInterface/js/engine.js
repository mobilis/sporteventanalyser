// Generated by CoffeeScript 1.6.2
(function() {
  var Ball, Drawable, Engine, Field, Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Engine = (function() {
    function Engine(ball) {
      var now;

      this.ball = ball;
      console.log(this.ball);
      this.resolution = [640, 480];
      this.bgcolor = 0..fffff0;
      this.obj_stack = [];
      this.scene = new THREE.Scene;
      this.camera = new THREE.PerspectiveCamera(75, this.resolution[0] / this.resolution[1], 1, 10000);
      this.camera.position.y = 33;
      this.camera.position.z = 100;
      this.camera_mode = "BIRD";
      this.amb_light = new THREE.AmbientLight(0xffffff, 1.0);
      this.scene.add(this.amb_light);
      this.renderer = new THREE.WebGLRenderer;
      this.renderer.clearColor = this.bgcolor;
      this.renderer.clear;
      this.renderer.setSize(this.resolution[0], this.resolution[1]);
      now = new Date;
      this.start_time = now.getTime();
      this.add(this.ball);
      this.mean_ball_cnt = 30;
      this.mean_ball_pos = {
        x: 0,
        y: 0,
        z: 0
      };
    }

    Engine.prototype.get_canvas = function(target_div) {
      return this.renderer.domElement;
    };

    Engine.prototype.add = function(obj) {
      var drawable, _i, _len, _ref, _results;

      this.obj_stack.push(obj);
      _ref = obj.drawables;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        drawable = _ref[_i];
        _results.push(this.scene.add(drawable));
      }
      return _results;
    };

    Engine.prototype.render = function() {
      var obj, time, _i, _j, _len, _len1, _ref, _ref1;

      time = (new Date).getTime() - this.start_time;
      this.mean_ball_pos.x = this.mean_ball_cnt * this.mean_ball_pos.x + this.ball.ball.position.x;
      this.mean_ball_pos.x /= this.mean_ball_cnt + 1;
      this.mean_ball_pos.y = this.mean_ball_cnt * this.mean_ball_pos.y + this.ball.ball.position.y;
      this.mean_ball_pos.y /= this.mean_ball_cnt + 1;
      this.mean_ball_pos.z = this.mean_ball_cnt * this.mean_ball_pos.z + this.ball.ball.position.z;
      this.mean_ball_pos.z /= this.mean_ball_cnt + 1;
      switch (this.camera_mode) {
        case "BIRD":
          this.camera.position.set(0, 60, 0);
          this.camera.rotation.set(-Math.PI / 2, 0, 0);
          break;
        case "KEEPERA":
          this.camera.position.set(-60, 10, 0);
          this.camera.lookAt(this.mean_ball_pos);
          break;
        case "KEEPERB":
          this.camera.position.set(60, 10, 0);
          this.camera.lookAt(this.mean_ball_pos);
          break;
        default:
          this.camera.position.x = 5 * Math.cos(time / 1200);
          this.camera.position.y = 33 + 5 * Math.sin(time / 600);
          this.camera.position.z = 50 + 25 * Math.sin(time / 2700);
          this.camera.lookAt(this.mean_ball_pos);
      }
      _ref = this.obj_stack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        obj.follow(this.camera.position, this.camera_mode === "BIRD");
      }
      _ref1 = this.obj_stack;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        obj = _ref1[_j];
        obj.animate(time);
      }
      return this.renderer.render(this.scene, this.camera);
    };

    Engine.prototype.select_players = function(plr_ids) {
      return "";
    };

    return Engine;

  })();

  Drawable = (function() {
    function Drawable() {
      this.drawables = [];
      this.followers = [];
    }

    Drawable.prototype.animate = function(time) {};

    Drawable.prototype.follow = function(target, reset) {
      var f, _i, _len, _ref, _results;

      if (reset == null) {
        reset = false;
      }
      _ref = this.followers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push((function(f) {
          if (reset) {
            return f.rotation.set(-Math.PI / 2, 0, 0);
          } else {
            return f.lookAt(target);
          }
        })(f));
      }
      return _results;
    };

    Drawable.prototype.toString = function() {
      return "Drawable";
    };

    return Drawable;

  })();

  Field = (function(_super) {
    __extends(Field, _super);

    function Field(texturefile) {
      var geometry, mat_cfg, material;

      this.width = 120;
      this.height = 90;
      geometry = new THREE.PlaneGeometry(this.width, this.height);
      mat_cfg = {
        map: new THREE.ImageUtils.loadTexture(texturefile),
        side: THREE.DoubleSide
      };
      material = new THREE.MeshLambertMaterial(mat_cfg);
      this.field = new THREE.Mesh(geometry, material);
      this.field.rotation.x = Math.PI / 2;
      this.drawables = [this.field];
      this.followers = [];
    }

    Field.prototype.toString = function() {
      return "Field";
    };

    return Field;

  })(Drawable);

  Ball = (function(_super) {
    __extends(Ball, _super);

    function Ball(texturefile) {
      var geometry, mat_cfg, material;

      geometry = new THREE.PlaneGeometry(2, 2);
      mat_cfg = {
        map: new THREE.ImageUtils.loadTexture(texturefile),
        alphaTest: 0.5
      };
      material = new THREE.MeshBasicMaterial(mat_cfg);
      this.ball = new THREE.Mesh(geometry, material);
      geometry = new THREE.PlaneGeometry(1, 1);
      mat_cfg = {
        map: new THREE.ImageUtils.loadTexture("img/shadow.png"),
        transparent: true
      };
      material = new THREE.MeshBasicMaterial(mat_cfg);
      this.shadow = new THREE.Mesh(geometry, material);
      this.shadow.rotation.x = -Math.PI / 2;
      this.shadow.position.y = 0.001;
      this.followers = [this.ball];
      this.drawables = [this.ball, this.shadow];
      this.ball.position.set(0, this.ball.geometry.height / 2, 0);
      this.last_update = 0;
      this.target_pos = {
        x: 0,
        y: 0
      };
      this.anim_factor = 10;
    }

    Ball.prototype.update = function(time, data) {
      this.target_pos = data.pos;
      return this.last_update = time;
    };

    Ball.prototype.animate = function(time) {
      var s_scale;

      this.ball.position.x = (this.anim_factor * this.ball.position.x + this.target_pos.x) / (this.anim_factor + 1);
      this.ball.position.z = (this.anim_factor * this.ball.position.z + this.target_pos.y) / (this.anim_factor + 1);
      /*
      @ball.position.y = 1
      @ball.position.y += Math.abs 2 * Math.sin time/120
      
      @ball.position.x = 2
      @ball.position.x += 2 * Math.cos time/120
      
      @shadow.position.x = @ball.position.x
      @shadow.position.z = @ball.position.z
      
      @shadow.scale.x = @ball.position.y
      @shadow.scale.x -= @ball.geometry.height
      
      @shadow.scale.y = @ball.position.y
      @shadow.scale.y -= @ball.geometry.height
      
      @shadow.scale.z = @ball.position.y
      @shadow.scale.z -= @ball.geometry.height
      */

      this.shadow.position.x = this.ball.position.x;
      this.shadow.position.z = this.ball.position.z;
      s_scale = 3.0 + this.ball.scale.x + this.ball.position.y - this.ball.geometry.height;
      return this.shadow.scale.set(s_scale, s_scale, s_scale);
    };

    Ball.prototype.toString = function() {
      return "Ball";
    };

    return Ball;

  })(Drawable);

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(id, team, tricot_image) {
      var geometry, mat_cfg, material;

      this.id = id;
      this.team = team;
      this.tricot_image = tricot_image;
      geometry = new THREE.PlaneGeometry(4, 4);
      mat_cfg = {
        map: new THREE.ImageUtils.loadTexture(this.tricot_image),
        alphaTest: 0.5
      };
      material = new THREE.MeshBasicMaterial(mat_cfg);
      this.shirt = new THREE.Mesh(geometry, material);
      this.shirt.position.y = this.shirt.geometry.height / 2;
      geometry = new THREE.PlaneGeometry(2, 2);
      mat_cfg = {
        map: new THREE.ImageUtils.loadTexture("img/shadow.png"),
        alpha: 0.5,
        transparent: true
      };
      material = new THREE.MeshBasicMaterial(mat_cfg);
      this.shadow = new THREE.Mesh(geometry, material);
      this.shadow.rotation.x = -Math.PI / 2;
      this.shadow.position.y = 0.01;
      this.followers = [this.shirt];
      this.drawables = [this.shirt, this.shadow];
      this.last_update = 0;
      this.target_pos = {
        x: 0,
        y: 0
      };
      this.anim_factor = 10;
    }

    Player.prototype.update = function(time, data) {
      this.target_pos = data.pos;
      return this.last_update = time;
    };

    Player.prototype.animate = function(time) {
      this.shirt.position.x = (this.anim_factor * this.shirt.position.x + this.target_pos.x) / (this.anim_factor + 1);
      this.shirt.position.z = (this.anim_factor * this.shirt.position.z + this.target_pos.y) / (this.anim_factor + 1);
      this.shadow.position.x = this.shirt.position.x;
      this.shadow.position.z = this.shirt.position.z;
      this.shadow.scale.x = this.shirt.position.y;
      this.shadow.scale.x -= this.shirt.geometry.height;
      this.shadow.scale.y = this.shirt.position.y;
      this.shadow.scale.y -= this.shirt.geometry.height;
      this.shadow.scale.z = this.shirt.position.y;
      return this.shadow.scale.z -= this.shirt.geometry.height;
    };

    Player.prototype.toString = function() {
      return "Player(" + this.tricot_image + ")";
    };

    return Player;

  })(Drawable);

  $(function() {
    var b, ball, engine, field, players, playersdict, refresh_selection, run, update, _fn, _i, _len, _ref;

    console.log("# SEA - sport event analyzer");
    console.log("## Initializing");
    ball = new Ball("img/ball.png");
    field = new Field("img/Fussballfeld.png");
    engine = new Engine(ball);
    players = [];
    playersdict = {};
    refresh_selection = function() {
      var plr_ids;

      plr_ids = [];
      $("#team_a").find("tbody").find("tr.ui-selected").each(function(i, t) {
        console.log(i);
        return plr_ids.push(t.id);
      });
      $("#team_b").find("tbody").find("tr.ui-selected").each(function(i, t) {
        return plr_ids.push(t.id);
      });
      return console.log(plr_ids);
    };
    engine.add(field);
    console.log(Date.now());
    console.log("* preparing view buttons");
    $("#perspectives_menu").buttonset;
    _ref = $("#perspectives_menu").find("input");
    _fn = function(b) {
      return b.onclick = function() {
        return engine.camera_mode = b.id;
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      _fn(b);
    }
    console.log("* adding canvas");
    $("#field").append(engine.get_canvas());
    console.log("* making selectables");
    $("#team_a, #team_b").selectable({
      filter: 'tr',
      selected: function(event, ui) {
        return refresh_selection();
      }
    });
    console.log("* starting animation loop");
    run = function() {
      requestAnimationFrame(run);
      return engine.render();
    };
    requestAnimationFrame(run);
    $("#goals").button().click(function(event) {
      sea.connect("seaclient@sea/Client", "sea", "mobilis@sea", function() {
        return sea.getGameMappings(function(mappings) {
          var tmp_counter, tmp_team_name;

          console.log("* Setting up field");
          console.log("* Setting up goal positions and size");
          console.log("* Setting up players");
          console.log(mappings.PlayerMappings);
          tmp_team_name = "";
          tmp_counter = {
            "true": 0,
            "false": 0
          };
          return mappings.PlayerMappings.forEach(function(v, i) {
            var color, plr, tshirt;

            if (i === 0) {
              tmp_team_name = v.TeamName;
            }
            tmp_counter[v.TeamName === tmp_team_name] += 1;
            color = "rot";
            if (v.TeamName === tmp_team_name) {
              color = "gelb";
            }
            tshirt = "img/trikot_" + color + "_" + tmp_counter[v.TeamName === tmp_team_name] + ".png";
            plr = new Player(v.PlayerID, v.TeamName, tshirt);
            console.log("Player: " + v.PlayerName + " (ID: " + v.PlayerID + ", Team: " + v.TeamName + ", Tshirt: " + tshirt + ")");
            engine.add(plr);
            players.push(plr);
            return playersdict[v.PlayerID] = players.length - 1;
          });
        });
      });
      sea.pubsub.subscribeStatistic();
      return sea.pubsub.addCurrentPositionDataHandler(function(item) {
        return console.log(item);
      });
    });
    console.log("* starting update loop");
    update = function() {
      var plr, _j, _len1, _ref1, _results;

      window.setTimeout(update, 1000);
      _ref1 = players.concat([ball]);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        plr = _ref1[_j];
        _results.push((function(plr) {
          var data;

          if (Math.random() > 0.5) {
            return;
          }
          data = {
            pos: {
              x: Math.random() * field.width - field.width / 2,
              y: Math.random() * field.height - field.height / 2
            }
          };
          return plr.update(0, data);
        })(plr));
      }
      return _results;
    };
    return window.setTimeout(update, 1000);
  });

}).call(this);
